// VARIABLES

// Status

pmhp = maxhp // PRIVATE - to save sys variable accesses (and reduce lag)

var midhp = pmhp / 2
var lowhp = pmhp / 3
var hihp = (4 * pmhp) / 5



// FUNCTIONS


// Lost items

func canUseBlade()
  return tt >= bladeDelay & canAct

func useBlade()
  equip blade
  activate R

  bladeDelay = tt + bladeCd

  return

func canUseBladeDS(nScreen)
  return canUseBlade()
  ^& si = nScreen

var slideCount = 0 // counter to give screen.Next() time to slide
func useBladeDS()
  ?slideCount = 0
    screen.Next()
    slideCount = 20
  
  :?slideCount > 0
    slideCount--
  
    ?slideCount = 0
      useBlade()
      screen.ResetOffset()
      return


func canUseArm()
  return tt >= armDelay &
  ^3 <= fd & fd <= 7
  ^& canAct

func useArm()
  equip arm
  activate R

  armDelay = tt + armCd

  return


func canUseMask()
  return tt >= maskDelay & canAct

func useMask()
  equipL triskelion
  equipR mask
  activate R

  maskDelay = tt + maskCd

  return

func canUseMaskDS(nScreen)
  return canUseMask()
  ^& si = nScreen

func useMaskDS()
  ?slideCount = 0
    screen.Next()
    slideCount = 20
  
  :?slideCount > 0
    slideCount--
  
    ?slideCount = 0
      useMask()
      screen.ResetOffset()
      return


func canUseFTali()
  return
  ^summon.GetId() ! "cinderwisp" &
  ^tt >= fTaliDelay &
  ^canAct |
  ^(il = "fire_talisman" & ils = 2) |
  ^(ir = "fire_talisman" & irs = 2)

func canHideFTali()
  return summon.GetId() = "cinderwisp"
  ^& tt >= fTaliDelay
  ^& canAct |
  ^(il = "fire_talisman" & ils = 2) |
  ^(ir = "fire_talisman" & irs = 2)

func useFTali(hand)
  ?hand = "l"
    equipL fire_talisman
    activate L
  :?hand = "r"
    equipR fire_talisman
    activate R

  fTaliDelay = tt + fTaliCd + castTime

  return

func canUseCind()
  return summon.GetId() = "cinderwisp"
  ^& tt >= cindDelay & canAct

func canKillCind(foeTotalHP,nIgnitions,cindDmg,margin)
  return foeTotalHP <= (nIgnitions * cindDmg) + margin

func useCind()
  activate cinderwisp
  cindDelay = tt + cindCd + castTime
  return


func canUseAETali()
  return
  ^summon.GetId() ! "voidweaver" &
  ^tt >= aeTaliDelay &
  ^canAct |
  ^(il = "aether_talisman" & ils = 2) |
  ^(ir = "aether_talisman" & irs = 2)

func useAETali(hand)
  ?hand = "l"
    equipL aether_talisman
    activate L
  :?hand = "r"
    equipR aether_talisman
    activate R

  aeTaliDelay = tt + aeTaliCd + castTime

  return

func canUseWeav()
  return summon.GetId() = "voidweaver"
  ^& tt >= weavDelay & canAct

func useWeav()
  activate voidweaver
  weavDelay = tt + weavCd + castTime
  return

func canUseWeavDS(nScreen)
  return canUseWeav()
  ^& si = nScreen

func useWeavDS()
  ?slideCount = 0
    screen.Next()
    slideCount = 20

  :?slideCount > 0
    slideCount--
  
    ?slideCount = 0
      useWeav()
      screen.ResetOffset()

      return


func canBash()
  return tt >= bashDelay & !aiI
  ^& 11 <= fd & fd <= 15
  ^& canAct

func bash(lItem)
  equipL @lItem@
  equipR bashing shield

  bashDelay = tt + bashCd

  return


// Special Weapons

func canUseHamm()
  return tt >= hammDelay &
  ^canAct |
  ^(ir = "heavy hammer" &
  ^irs = 2)

var hammCdSlower
func canUseHamm2()
  hammCdSlower = item.GetCooldown("hammer") <= 0
  return hammCdSlower &
  ^canAct |
  ^(ir = "heavy hammer" &
  ^irs = 2)

func useHamm()
  equip heavy hammer
  activate R

  hammDelay = tt + hammCd + castTime

  return


func canUseBard()
  return tt >= bardDelay &
  ^canAct |
  ^(ir = "bardiche" &
  ^irs = 2)

var bardCdSlower
func canUseBard2()
  bardCdSlower = item.GetCooldown("bardiche") <= 0

  return bardCdSlower &
  ^canAct |
  ^(ir = "bardiche" &
  ^irs = 2)

func useBard(yourBard)
  ?fd < 10
    equip @yourBard@
    activate R

    bardDelay = tt + bardCd + castTime


  return


func canDash()
  return tt >= dashDelay & !aiI
  ^& 11 <= fd & fd <= 15
  ^& canAct

func dash(lItem,yourDshield)
  equipL @lItem@
  equipR @yourDshield@

  dashDelay = tt + dashCd

  return


func canUseQstaff()

  ?tt >= qstaffDelay
    return canAct |
    ^(ir = "quarterstaff"
    ^& irs = 2)

  :
    return false

func canUseQstaff_OG()
  var qstaffCd_OG
  qstaffCd_OG = item.GetCooldown("quarterstaff")

  return canAct &
  ^(qstaffCd_OG <= 0 /*| qstaffCd_OG > 165*/)
  ^ | (ir = "quarterstaff" & irs = 2)

func useQstaff(yourQstaff)
  equip @yourQstaff@
  activate R

  qstaffDelay = tt + qstaffCd

  return


func canUseMind()
  return item.GetCooldown("mind") <= 0 & canAct


// Tools

func canUseHatchet()
  return item.GetCooldown("hatchet") <= 0
  ^& canAct
  ^& harvest.distance < 5
  ^& ir = "hatchet"

func useHatchet()
  activate R
  return


// Potions

func canUsePot()
  return ip ! "empty" & canAct

func canUsePotHeal()
  ?canUsePot()
    ?ip = "healing" |
    ^ip = "vampiric"
      return hp < lowhp

    :?ip = "defensive"
      return hp < midhp
    
    :
      return false
  :
    return false

func canUsePotDmg()
  return canUsePot() &
  ^(ip = "berserk" | ip = "lucky")

func canUsePotSpecial(type,cond)

  ?canUsePot()

    ?ip = type
      ?ip = "cleansing"
        return hp < midhp &
        ^debuffs.count >= cond
        // ^^^ = no. of debuffs to cleanse
    
      :?ip = "strength"
        return foe.armor & foe.armor > cond

      :?ip = "lightning"
      ^|ip = "experience"
        return foe.count >= cond

      :?ip = "invisibility"
        return f = boss

      :
        >c-10,0,#red,
        ^func canUsePotSpecial() - Potion recieved\n
        ^does not belong to this function: "@type@"
        return false

    :
      >c-10,0,#red,
      ^func canUsePotSpecial() - Potion recieved\n
      ^is not valid or equipped: "@type@"
      return false


  : // potion hasn't been brewed, it's been used,
    return false //or just can't be activated atm


// Others

var moonTimer = 0
var moonFrame
func doMoondial(weapon1, weapon2, mode)

  ?mode = 0 // Normal moondialing
    moonTimer++
    moonFrame = moonTimer % 3

    ?moonFrame = 1
      equipL moon
      equipR @weapon1@
    :?moonFrame = 2
      equipL moon
      equipR @weapon2@
    :
      equipL @weapon1@
      equipR @weapon2@

  :?mode = 1
    /* Berserk Moondialing (For non-speed enchanted *max
    swords) */
    moonTimer++
    moonFrame = moonTimer % 4

    ?moonFrame = 1
      equipL @weapon2@ // on cooldown
      equipR @weapon1@
    :?moonFrame = 2
      equipL moon
      equipR @weapon1@
    :?moonFrame = 3
      equipL @weapon1@ // on cooldown
      equipR @weapon2@
    :?moonFrame = 4
      equipL moon
      equipR @weapon2@
  
  :?mode = 2
    /* Not moondialing, but useful to have here (speed
    enchant *max swords) */
    equipL @weapon2@
    equipR @weapon1@

  :?mode = 3
    /* For when you have just 1 +21 sword (weapon2 can be
    anything, it will not be used) */
    ?fd <= 5
      equipL moon
    :
      equipL @weapon2@
    equipR @weapon1@


  return



