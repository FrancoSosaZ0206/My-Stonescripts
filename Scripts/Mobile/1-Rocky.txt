/*var mind = import UI/MindstoneButton

mind.SetXY(1,13)*/

// *******************************************************
//                       1-Rocky.txt                      
// *******************************************************

// Script for Rocky Plateau


// IMPORTS

// *******************************************************
//                     Utilities.txt                      
// *******************************************************



// VARIABLES:

//Units

var sec = 30 // frames
var scr = 69 // 1 screen = 69 units



//FUNCTIONS:

func max(n1,n2)
  ?n1 >= n2
    return n1
  :
    return n2

func myFormatDigital(frames)
  ?frames <= 0
    return "00:00"
  :
    var timeStr
    var secs
    var mins
    var secStr
    var minStr


    secs = frames/30
    mins = (frames/30)/60


    secs -= mins*60


    ?mins < 10
      minStr = "0" + mins
    :
      minStr = mins
      
    ?secs < 10
      secStr = "0" + secs
    :
      secStr = secs
    
    return minStr + ":" + secStr

func getLargestStr(arrStr)

  var maxStr = arrStr[0]
  var maxInd = -1

  for str : arrStr
    ?string.Size(str) > string.Size(maxStr)
      maxStr = str

  return maxStr

func replaceInStr(str,charOld,charNew)
  for i = 0 .. str.Count() - 1
    ?str[i] = charOld
      str[i] = charNew

  return str



// *******************************************************
//                 END OF "Utilities.txt"                 
// *******************************************************

// *******************************************************
//                    performanceV2.txt                   
// *******************************************************



// VARIABLES - definitions


//Location
var l = loc
var ls = loc.stars
var lavg = loc.averageTime
var lbt = loc.bestTime
var lb = loc.begin
var ll = loc.loop

// Foe
var f
f = foe
var fn
var fbs
var fds
var fd
var fc
var fs
var ft
var fhp
fhp = foe.hp
var fa
fa = foe.armor
var fdmg

// Time
var tt
tt = totaltime

// Item
var ip
ip = item.potion
var il
il = item.left
var ils
ils = item.left.state
var ilt
var ili

var ir
ir = item.right
var irs
irs = item.right.state
var irt
var iri

// Player stats
var php
var pmhp
var pa
var pma
var ds
var bs

// Ai
var aiE
var aiI
aiI = ai.idle

//screen
var si
si = screen.i

//resources
var rs // res.stone
var rw // res.wood
var rt // res.tar
var rb // res.bronze
var rk // res.ki
var rc // res.crystals

// Functions
var canAct
canAct = item.CanActivate()

// Cooldowns
var bladeCd = 80 * sec
var maskCd = 48 * sec
var armCd = 39 * sec
var fTaliCd = 5 * sec
var aeTaliCd = 5 * sec
var cindCd = 90 * sec
var weavCd = 90 * sec

var bardCd = 30 * sec
var hammCd = 22 * sec
// var mindCd = 12 * sec // currently not in use
var qstaffCd = 5 * sec + 15 // 5,5s
var dashCd = sec + 15 // 1,5s
var bashCd = 9 * sec

// Cast times
var castTime = sec

// Delays
var bladeDelay = 0
var maskDelay = 0
var armDelay = 0
var fTaliDelay = 0
var aeTaliDelay = 0
var cindDelay = 0
var weavDelay = 0

var bardDelay = 0
var hammDelay = 0
// var mindDelay = 0 // currently not in use
var qstaffDelay = 0
var dashDelay = 0
var bashDelay = 0

?tt < 3
  lb = loc.begin
  ll = loc.loop

?tt = 1
  lavg = loc.averageTime
  lbt = loc.bestTime

  bladeDelay = 0
  maskDelay = 0
  armDelay = 0
  fTaliDelay = 0
  aeTaliDelay = 0
  cindDelay = 0
  weavDelay = 0

  bardDelay = 0
  hammDelay = 0
  // mindDelay = 0 // currently not in use
  qstaffDelay = 0
  dashDelay = 0
  bashDelay = 0



// *******************************************************
//               END OF "performanceV2.txt"               
// *******************************************************

// *******************************************************
//                      UI_Maker.txt                      
// *******************************************************



// FUNCTIONS

/* Common properties/parameters:
  *** some of these may be optional ***

  x = horizontal position (relative to dock)
  y = vertical position (relative to dock)
  w = width
  h = height
  anchor = position relative to the screen
  dock = position relative to parent UI component
  col = color in hex format
  style = frame style ID (number from -8 to 8) */

/* Optional properties/parameters:
  send 0 if you don't want to use them.
  The default value will be used instead. */


/* Makes a panel component.
PARAMETERS:
  Common:
    - x
    - y
    - anchor
    - dock

  Optional:
    - w
    - h
    - col = color of the panel.
    - style
    - child = initial child component to add. */
func mkPanel(x,y,w,h, anchor,dock, col,style, child)

  var panel

  panel = ui.AddPanel()

  panel.x = x
  panel.y = y

  ?w
    panel.w = w
  ?h
    panel.h = h
  
  panel.anchor = anchor
  panel.dock = dock

  ?col
    panel.color = col
  ?style
    panel.style = style

  ?child
    panel.Add(child)

  return panel

/* Makes a textbox component.
PARAMETERS:
  Common:
    - x
    - y
    - anchor
    - dock
  
  Special:
    - txt = textbox contents.
    - align = text justification/alignment inside the textbox.
              Default: "left"
  
  Optional:
    - w
    - h
    - col = textbox color */
func mkTxtbox(x,y,w,h, anchor,dock, txt, align, col)

  //declarations:
  var txtbox

  //assignations:
  txtbox = ui.AddText(txt)

  //adding alignment
  txtbox.anchor = anchor
  txtbox.dock = dock

  ?align
    txtbox.align = align

  //adding color
  ?col
    txtbox.color = col

  //adding position
  txtbox.x = x
  txtbox.y = y

  //adding width and height
  ?w
    txtbox.w = w
  :
    txtbox.w = string.Size(getLargestStr(txtbox.lines))
  ?h
    txtbox.h = h
  :
    txtbox.h = a.Count(txtbox.lines)


  return txtbox

/* Makes a button component.
PARAMETERS
  Common:
    - x
    - y
    - w
    - h
    - anchor
    - dock

  Special:
    - txt = button text
    - col = general color of the button (colors below override it)
    - pressed = function that the button will perform when pressed

  Optionals:
    - tcol   = text color
    - bcol   = border color
    - hcol   = highlight color (when pressed)
    - down   = function that the button will perform when press begins
    - up     = function that the button will perform when press ends
    - sound  = sound effect when pressed */
func mkBtn(x,y,w,h, anchor,dock, txt, col,tcol,bcol,hcol, style, pressed,down,up, sound)
  
  var btn
  btn = ui.AddButton()

  btn.x = x
  btn.y = y

  btn.text = txt

  btn.w = string.Size(btn.txt) + w
  btn.h = h

  ?anchor
    btn.anchor = anchor
  ?dock
    btn.dock = dock

  ?style
    btn.style = style

  ?tcol
    btn.tcolor = tcol
  :
    btn.tcolor = col
  ?bcol
    btn.bcolor = bcol
  :
    btn.bcolor = col
  ?hcol
    btn.hcolor = hcol
  :
    btn.hcolor = col

  btn.SetPressed(pressed)
  ?down
    btn.SetDown(down)
  ?up
    btn.SetUp(up)

  ?sound
    button.sound = sound

  return btn



// *******************************************************
//                  END OF "UI_Maker.txt"                 
// *******************************************************

// *******************************************************
//                     MyArsenal.txt                      
// *******************************************************



// VARIABLES:

/* Renamed:

Mamba Negra = poison sword D *max
Dothaneel = vigor sword D *max
Void Slayer = aether sword D *max
Vantum Phoenix = fire sword D *max
Bifrost = ice sword D *max
Speedy Hammer = stone hammer *max
Kubikiribocho = bardiche *max (enchanted: crit) */


//poison:
var dPsword1 = "poison sword dP *max +13" // enchanted: speed
var dPsword2 = "poison sword dP +0" // enchanted: debuff
var psword = "poison sword D *max"
var pshield = "poison shield A *max"
var pbow = "poison bow -dP *max"
var dPbow = "poison bow dP *max"
var dPwand = "poison wand dP *max"

//vigor:
var dLsword = "vigor sword dL *max"
var vsword = "vigor sword D *max Spring24"
var vshield = "vigor shield A *max"
var ahShield = "vigor shield ah *max"
var ahHammer = "vigor hammer ah *max"
var vwand1 = "vigor wand D *max +10"
var vwand2 = "vigor wand D *max +9"

//aether:
var aesword = "aether sword D *max"
var dUsword1 = "aether sword dU *max +15 -big"
var dUSWORD2 = "big aether sword dU *max +15"
var aeshield = "aether shield -au *max"
var auShield = "aether shield au *max"
var aebow = "aether crossbow D *max"
var aeStaff = "aether staff dU *max"
var aeWand = "aether wand dU *max"

//fire:
var dFsword = "fire sword dF *max"
var fsword = "fire sword D *max"
var fshield = "fire shield A *max"
var fbow = "fire crossbow dF *max"
var dFwand = "fire wand dF *max"

//ice:
var dIsword = "ice sword dI *max"
var isword = "ice sword D *max"
var ishield = "ice shield A *max"
var dIwand1 = "ice wand dI *max +16"
var dIwand2 = "ice wand dI *max +11"
var ibow = "ice crossbow D *max"

//alternate:
var altbow = "crossbow *max golden"

//special weapons:
var dshield = "dashing shield *max golden HoH24"
var myqstaff = "quarterstaff golden"
var fastBard = "bardiche *max" // enchanted: speed
var rbow = "repeating crossbow *max golden"
var cshield1 = "compound shield *max shiny"
var cshield2 = "compound shield *max -shiny"
var tshield = "towering shield *max golden"



// Weapons damage and stats

var bladeDmg = 310
var bladeRDmg = 95
var smiteMult = 8.8 // mult = multiplier

var armDmg = 44
var armRDmg = armDmg / 2
var maxArmBuffs = 3

var cindDmg = 32 // multiplied by the amount of Ignition buffs
var maxIgnitions = 15

var weavDmg = 1
var weavUnmkChance = 0.12 // %
var weavArmor = 1.35

var hammDmg = 123

/* WARNING: These stats are for
"Kubikiribocho" only, not for the
other bardiche! */
var bardDmg = 52
var bardCrit = 10.8
var bardRDmg = (bardDmg + 17) * bardCrit



// *******************************************************
//                 END OF "MyArsenal.txt"                 
// *******************************************************

// *******************************************************
//                    Speed_O_Meter.txt                   
// *******************************************************

/* FILE INFO
  Time Display Utility
  Made by MetalEagle26 (Tom Crow)

  current version: 1.6 */

// VARIABLES:

// Already defined in Utilities:
// var sec = 30 // frames

// Times in frames:
// Already defined in PerformanceV2:
/* var tt = totaltime
var lbt
var lavg

tt = totaltime
?tt <= 1
  lbt = loc.bestTime
  lavg = loc.averageTime */

// Times in seconds:
var ttDigital = myFormatDigital(tt)
var pb = myFormatDigital(lbt)
var avg = myFormatDigital(lavg)

// Times in seconds and frames:
var ttSpeedrun = formatSpeedrun(tt)
var pbSpeedrun = formatSpeedrun(lbt)
var avgSpeedrun = formatSpeedrun(lavg)


// Variable updating frequency:
?tt % 30 = 0
  ttDigital = myFormatDigital(tt)
ttSpeedrun = formatSpeedrun(tt)

?loc.loop
  pb = myFormatDigital(lbt)
  avg = myFormatDigital(lavg)

  pbSpeedrun = formatSpeedrun(lbt)
  avgSpeedrun = formatSpeedrun(lavg)



// PUBLIC FUNCTIONS

func speedOmeterUpdate(isSpeedrun)
  ?isSpeedrun
    return true
  :
    return loc.begin | loc.loop | (tt % 30 = 0)

func speedOmeterToStr(isSlim, isSpeedrun)

  ?isSlim
    ?isSpeedrun
      return
      ^"☆ " + pbSpeedrun +  // ☆ = PB
      ^" | ≈ " + avgSpeedrun + // ≈ = AVG
      ^" | ▶ " + ttSpeedrun           // ▶ = CURR

    :
      return
      ^"☆ " + pb +       // ☆ = PB
      ^" | ≈ " + avg +      // ≈ = AVG
      ^" | ▶ " + ttDigital         // ▶ = CURR

  :
    ?isSpeedrun
      return
      ^"    SPEED-O-METER" + "\n" +
      ^"·····················" + "\n" +
      ^" PB  " + pbSpeedrun + " (" + lbt + "f)" + "\n" +
      ^" AVG " + avgSpeedrun + " (" + lavg + "f)" + "\n" +
      ^" CUR " + ttSpeedrun + " (" + tt + "f)"

    :
      return
      ^"SPEED-O-METER" + "\n" +
      ^"·············" + "\n" +
      ^"  PB  " + pb + "\n" +
      ^"  AVG " + avg + "\n" +
      ^"  CUR " + ttDigital

func printSpeedOmeter(x, y, col, isSlim, isSpeedrun)

  >`@x@,@y@,@col@,@speedOmeterToStr(isSlim, isSpeedrun)@

  return

func asciiPrintSpeedOmeter(x, y, col, isSlim, isSpeedrun)

  >`@x@,@y@,@col@,ascii
@replaceInStr(speedOmeterToStr(isSlim, isSpeedrun), " ", "#")@
asciiend

  return

func speedOmeterUI(x, y, col, isSlim, isSpeedrun)

  var txt
  var panel

  // For the panel:
  var pnlAnchor
  var pnlDock
  var style
  
  ?isSlim
    pnlAnchor = top_center
    pnlDock = top_center
    style = -1
  :
    pnlAnchor = top_left
    pnlDock = top_left
    style = -2

  txt = mkTxtbox(
    ^1, 1, null, null, // x, y, w, h,
    ^top_left, top_left, // pnlAnchor, dock,
    ^speedOmeterToStr(isSlim, isSpeedrun), // txt
    ^null, col) // align, col

  panel = mkPanel(
    ^x, y, txt.w + 2, txt.h + 2, // x, y, w, h,
    ^pnlAnchor, pnlDock, // anchor, dock,
    ^col, style, txt) // col, style, child

  return panel



// *******************************************************
//               END OF "Speed_O_Meter.txt"               
// *******************************************************

// *******************************************************
//                 DPS_Meter_MODIFIED.txt                 
// *******************************************************


/* FILE INFO
  Made by: Pikarizard Charikachu xD
  Modified by: MetalEagle26 (Tom Crow)
  
  Current version: v1.6 */


// PUBLIC VARIABLES

var DPSMeterEnabled = false


// GLOBAL VARIABLES

var dps_sec = 30  // 1 sec = 30 frames

var dps_tt        // total time, on in-game frames
var currhp = 0    // foe's current hitpoints (with armor)
var nethp = 0     // foe's net maximum hitpoints (with armor)
var dps_f         // foe

dps_tt  = totaltime
currhp = foe.hp + foe.armor
nethp  = foe.maxhp + foe.maxarmor
dps_f   = foe

var hits      = 0 // hit counter
var dmg       = 0 // current damage dealt
var totalDmg  = 0 // total damage dealt
var startTime = 0 // timestamp for the beginning of the fight
var auxhp     = 0 // auxiliar variable to compare with currhp

var FRM = "N/A" // frames elapsed from first hit
var FPH = "N/A" // frames per hit >>> hit frequency | frames elapsed from each hit to the next
var HPS = "N/A" // hits per second
var DPF = "N/A" // damage per frame
var DPS = "N/A" // damage per second



// PROCEDURE

// Calculate only when desired:
?DPSMeterEnabled

  ?dps_f = "boss" // only works when there's a boss

    ?0 < currhp & currhp < nethp // boss lost hp/armor, but isn't dead

      ?auxhp > currhp // if current hp updates
        hits += 1 // we count a hit
        dmg       = auxhp - currhp // we get the damage dealt from the difference
        totalDmg  = totalDmg + dmg // and we accumulate it in this variable
  
    : // else, reset temporal variables
      startTime = dps_tt
      hits      = 0
      dmg       = 0
      totalDmg  = 0


    FRM = dps_tt - startTime // total time minus the time the first hit was dealt
    ?hits > 1
      FPH = FRM      / (hits-1) // -1 is there to avoid stat flicking
    :
      FPH = "N/A"
  
    ?FPH ! "N/A"
      HPS = dps_sec      / FPH
    :
      HPS = "N/A"
      
    ?FRM > 0
      DPF = totalDmg / FRM // damage accumulated - no. frames elapsed
    :
      DPF = "N/A"

    ?DPF ! "N/A"
      DPS = DPF  * dps_sec
    :
      DPS = "N/A"



// PRIVATE FUNCTIONS (do not use/modify!)

func dpsUpdate()
  ?DPSMeterEnabled
    auxhp = currhp

  return


var hits_old
var HPS_old
var dmg_old
var DPF_old
var DPS_old



// PUBLIC FUNCTIONS

/* mode:
  1 = updates the full version of the Meter.

  2 = updates a smaller version of it,
      containing less information. */
func dpsMeterUpdate(mode)
  var result = false

  ?DPSMeterEnabled
    ?dps_f = "boss"
      
      ?mode = 1
        ?(hits_old ! hits | HPS_old ! HPS |
        ^dmg_old ! dmg | DPF_old ! DPF |
        ^DPS_old ! DPS)
          ?hits_old ! hits
            hits_old = hits
          ?HPS_old ! HPS
            HPS_old = HPS
          ?dmg_old ! dmg
            dmg_old = dmg
          ?DPF_old ! DPF
            DPF_old = DPF
          ?DPS_old ! DPS
            DPS_old = DPS

          result = true


      :?mode = 2 &
      ^DPS_old ! DPS
        DPS_old = DPS

        result = true

  return result


/* Returns ui panel containing the DPS Meter.
mode:
  1 = returns the full version of the Meter.

  2 = returns a smaller version of it,
      containing less information. */
func uiDPSMeter(x,y,colorStr,mode)
  var panel
  var txt
  
  ?DPSMeterEnabled & (mode = 1 | mode = 2)

    panel = ui.AddPanel()

    var dpsStr
    ?mode = 1
      dpsStr = "   DPS METER   "   + "\n" +
      ^        "···············"   + "\n" +
      ^        " hits     " + hits_old + "\n" +
      ^        " hits/s   " + HPS_old  + "\n" +
      ^        " dmg /hit " + dmg_old  + "\n" +
      ^        " dmg /f   " + DPF_old  + "\n" +
      ^        " dmg /s   " + DPS_old  + "\n" +
      ^        "···············"

    :?mode = 2
      dpsStr = "DPS | " + DPS_old

    txt = ui.AddText(dpsStr)


    panel.style = 3
    panel.Add(txt)
    
    ?mode = 1
      panel.anchor = top_left
      panel.dock = top_left
      txt.anchor = top_left
      txt.dock = top_left

    :?mode = 2
      panel.anchor = top_center
      panel.dock = top_center
      txt.anchor = top_left
      txt.dock = top_left
      
    
    panel.color = colorStr
    txt.color = colorStr


    panel.x = x
    panel.y = y
    
    txt.x = 1
    txt.y = 1
    
    ?mode = 1
      txt.w = 15
      txt.h = 8

    :?mode = 2
      txt.w = string.Size(dpsStr)
      txt.h = 1


    panel.w = txt.w + 2
    panel.h = txt.h + 2


    dpsUpdate()


  ?mode ! 1 & mode ! 2
    >c0,0,#red,func uiDPSMeter() - incorrect mode: @mode@

  return panel



// *******************************************************
//             END OF "DPS_Meter_MODIFIED.txt"            
// *******************************************************

// *******************************************************
//                    MyBetterInfo.txt                    
// *******************************************************



// FUNCTIONS

// Helper functions

func colToHex(colName)
  ?colName = "red"
    return #FF0000
  :?colName = "orange"
    return #FF7518
  :?colName = "yellow"
    return #FFFF00
  :?colName = "gold"
    return #E49B0F
  :?colName = "blue"
    return #0000FF
  :?colName = "cyan"
    return #00FFFF
  :?colName = "magenta"
    return #FF00FF
  :?colName = "pink"
    return #E0115F
  :?colName = "purple"
    return #800080
  :?colName = "violet"
    return #7F00FF
  :?colName = "green"
    return #008000
  :?colName = "darkGreen"
    return #023020
  :?colName = "white"
    return #FFFFFF
  :?colName = "gray"
    return #808080
  :?colName = "black"
    return #000000
  :?colName = "brown"
    return #7B3F00
  :?colName = "turquoise" | colName = "turquesa"
    return #40E0D0
  :?colName = "rainbow" | colName = "rgb"
    return #rainbow
  :
    >c-20,0,#red,ERROR: colToHex() got unexisting color: @colName@



// Stats

/* Gets buff information
nameid = name of the buff
inFoe - buff precedence:
  true = get buff from foe.
  false = get buff from player.
infoIndex - tyoe of information to get:
  0 = symbol (Unicode).
  1 = id (buff name).
  2 = stack count (buffs accumulated).
  3 = remaining duration on first stack.
RETURNS: buff info if found, 0 otherwise. */
func getBuffInfo(nameid,inFoe,infoIndex)
// if inFoe = true, checks foe's buffs, else, player's buffs
  var info
  var buffFound
  var arrBuffs


  ?inFoe
    arrBuffs = string.Split(fbs,",", true)
  :
    arrBuffs = string.Split(bs,",", true)
    
  ?arrBuffs & !buffFound
    for buff : arrBuffs
      ?buff = nameid
        var arrInfo = string.Split(buff,":",true)


        ?0 <= infoIndex & infoIndex <= 3
          info = int.Parse(arrInfo[infoIndex])


        buffFound = true


    ?buffFound = true
      return info
    :
      return 0

/* - arrInfo[0] is symbol
   - arrInfo[1] is id
   - arrInfo[2] is stack count
   - arrInfo[3] is remaining duration on first stack */
func getDebuffLvl(nameid,inFoe)
// if inFoe = true, checks foe's debuffs, else, player's debuffs
  var lvl
  var debuffFound
  var arrDebuffs


  ?inFoe
    arrDebuffs = string.Split(fds,",", true)
  :
    arrDebuffs = string.Split(ds,",", true)


  ?arrDebuffs & !debuffFound
    for debuff : arrDebuffs
      ?debuff = nameid
        var arrInfo = string.Split(debuff,":",true)


        lvl = int.Parse(arrInfo[2])
        debuffFound = true


    ?debuffFound = true
      return lvl
    :
      return 0


/* Shows a list of debuffs.
PARAMETERS:
  - inFoe:
    true = debuffs from foe
    false = player debuffs
  - col = color to show the debuffs list
  - isUI:
    true = returns an UI panel containing
           an UI textbox with the debuffs list
    false = directly prints out the debuffs
            list into the screen

RETURNS: 
  if there are debuffs in the target entity (inFoe),
    UI panel if isUI = true, nothing otherwise.
  else, returns nothing. */
func showDebuffs(inFoe,x,y,col,isUI)
  ?(inFoe & fds)
  ^|(!inFoe & ds)
    var arrDebuffs


    ?inFoe
      arrDebuffs = string.Split(fds,",", true)
    :
      arrDebuffs = string.Split(ds,",",true)


    ?arrDebuffs
      ?isUI
        var debuffsTxtbox
        var debuffsPanel
        var debuffsStr = "Debuffs:\n"

        for debuff : arrDebuffs
          var arrInfo = string.Split(debuff,":",true)

          debuffsStr += arrInfo[0] + "(" + arrInfo[1] + ") = " + arrInfo[2] + "\n"
        
        debuffsTxtbox = mkTxtbox(
          ^1,1,null,null, // x,y,w,h
          ^top_left,top_left, // anchor, dock
          ^debuffsStr, // txt
          ^null,col // align, col
        )

        debuffsPanel = mkPanel(
        ^x,y,
        ^debuffsTxtbox.w + 1, // w
        ^debuffsTxtbox.h + 1, // h
        ^top_left,top_left, // anchor, dock
        ^col,1, // col, style
        ^debuffsTxtbox) // child

        return debuffsPanel

      :
        >`@x@,@y@,@col@,Debuffs:
        var i = 0
        for debuff : arrDebuffs
          var arrInfo = string.Split(debuff,":",true)


          >`@x@,@y+1 + i@,@col@,  @arrInfo[0]@ (@arrInfo[1]@) = @arrInfo[2]@
          i++
        
        return

  :
    return

/* Shows a list of buffs.
PARAMETERS:
  - inFoe:
    true = buffs from foe
    false = player buffs
  - col = color to show the buffs list
  - isUI:
    true = returns an UI panel containing
           an UI textbox with the buffs list
    false = directly prints out the buffs
            list into the screen

RETURNS: 
  if there are buffs in the target entity (inFoe),
    UI panel if isUI = true, nothing otherwise.
  else, returns nothing. */
func showBuffs(inFoe,x,y,col,isUI)
  ?(inFoe & fbs)
  ^|(!inFoe & bs)
    var arrBuffs


    ?inFoe
      arrBuffs = string.Split(fbs,",", true)
    :
      arrBuffs = string.Split(bs,",",true)


    ?arrBuffs
      ?isUI
        var buffsTxtbox
        var buffsPanel
        var buffsStr = "Buffs:\n"

        for buff : arrBuffs
          var arrInfo = string.Split(buff,":",true)

          buffsStr += arrInfo[0] + "(" + arrInfo[1] + ") = " + arrInfo[2] + "\n"
        
        buffsTxtbox = mkTxtbox(
          ^1,1,null,null, // x,y,w,h
          ^top_left,top_left, // anchor, dock
          ^buffsStr, // txt
          ^null,col // align, col
        )

        buffsPanel = mkPanel(
        ^x,y,
        ^buffsTxtbox.w + 1, // w
        ^buffsTxtbox.h + 1, // h
        ^top_left,top_left, // anchor, dock
        ^col,1, // col, style
        ^buffsTxtbox) // child

        return buffsPanel

      :
        >`@x@,@y@,@col@,Buffs:
        var i = 0
        for buff : arrBuffs
          var arrInfo = string.Split(buff,":",true)


          >`@x@,@y+1 + i@,@col@,  @arrInfo[0]@ (@arrInfo[1]@) = @arrInfo[2]@
          i++
        
        return

  :
    return

func showEffects(isBuff,inFoe,x,y,col,isUI)
  ?isBuff
    ?isUI
      return showBuffs(inFoe,x,y,col,true)
    :
      showBuffs(inFoe,x,y,col,false)
      return
  :
    ?isUI
      return showDebuffs(inFoe,x,y,col,true)
    :
      showDebuffs(inFoe,x,y,col,false)
      return


func getFoeTotalHP()
  return fhp + fa



// Strings

/* shows a big string, broken down into several lines.
PARAMETERS:
  - str = the string in question
  - x
  - y
  - maxW = maximum width to show the string
  - col (optional) = resulting text's color
  - isUI:
    - true = returns an UI component with the string
    - false = prints out the broken down string directly.
              DOES NOT RETURN ANYTHING. */
func showBigStr(x,y,maxW,str,col,isUI)

  ?isUI
    var txtbox
    var panel

    txtbox = mkTxtbox(1,1,maxW,null,
    ^top_left,top_left,
    ^str,null,col)

    panel = mkPanel(x,y,
    ^txtbox.w + 2,
    ^txtbox.h + 2,
    ^top_left,top_left,
    ^col,-1,txtbox)
    
    return panel
  
  :
    var a = string.Break(str, maxW)

    for i = 0 .. a.Count()-1
      ?col
        >`@x@,@y + i@,@col@,@a[i]@
      :
        >`@x@,@y + i@,@a[i]@

    return

/* Shows a string centered in the screen,
   breaking it down into several lines if necessary.
PARAMETERS:
  - y
  - maxW = maximum width to show the string
  - str = the string in question
  - col = output color of the string
  - isUI:
    - true = returns an UI component with the string
    - false = prints out the centered, broken down
              string directly.
              DOES NOT RETURN ANYTHING. */
func showStrCtr(y,maxW,str,col,isUI)

  ?isUI
    var txtbox
    var panel

    txtbox = mkTxtbox(1,1,maxW,null,
    ^top_left,top_left,
    ^str,center,col)

    panel = mkPanel(
    ^- (txtbox.w / 2),y,
    ^txtbox.w + 2,
    ^txtbox.h + 2,
    ^center_center,center_centere,
    ^col,-1,txtbox)
    
    return panel

  :

    var a = string.Break(str, maxW)

    for i = 0 .. a.Count()-1
      var x
      x = - ( string.Size(a[i]) - 1 ) / 2
      ?col
        >c@x@,@y + i@,@col@,@a[i]@
      :
        >c@x@,@y + i@,@a[i]@

    return



// *******************************************************
//               END OF "MyBetterInfo.txt"                
// *******************************************************

// *******************************************************
//                       Combat.txt                       
// *******************************************************



// VARIABLES

// Status

var pmhp = maxhp // PRIVATE - to save sys variable accesses (and reduce lag)

var midhp = pmhp / 2
var lowhp = pmhp / 3
var hihp = (4 * pmhp) / 5



// FUNCTIONS


// Lost items

func canUseBlade()
  return tt >= bladeDelay & canAct

// cannot be interrupted, doesn't need a cooldown check
func useBlade()
  equip blade
  activate R

  bladeDelay = tt + bladeCd

  return

/* Checks if Blade of the Fallen God
can be used in 2 screens of distance,
according to a certain screen index. */
func canUseBladeDS(nScreen)
  return canUseBlade()
  ^& si = nScreen

var slideCount = 0 // counter to give screen.Next() time to slide
func useBladeDS()
  ?slideCount = 0
    screen.Next()
    slideCount = 20
  
  :?slideCount > 0
    slideCount--
  
    ?slideCount = 0
      useBlade()
      screen.ResetOffset()
      return


func canUseArm()
  return tt >= armDelay &
  ^3 <= fd & fd <= 7
  ^& canAct

func useArm()
  equip arm
  activate R

  armDelay = tt + armCd

  return


func canUseMask()
  return tt >= maskDelay & canAct

func useMask()
  equipL triskelion
  equipR mask
  activate R

  maskDelay = tt + maskCd

  return

func canUseMaskDS(nScreen)
  return canUseMask()
  ^& si = nScreen

func useMaskDS()
  ?slideCount = 0
    screen.Next()
    slideCount = 20
  
  :?slideCount > 0
    slideCount--
  
    ?slideCount = 0
      useMask()
      screen.ResetOffset()
      return


func canUseFTali()
  return
  ^summon.GetId() ! "cinderwisp" &
  ^tt >= fTaliDelay &
  ^canAct |
  ^(il = "fire_talisman" & ils = 2) |
  ^(ir = "fire_talisman" & irs = 2)

func canHideFTali()
  return summon.GetId() = "cinderwisp"
  ^& tt >= fTaliDelay
  ^& canAct |
  ^(il = "fire_talisman" & ils = 2) |
  ^(ir = "fire_talisman" & irs = 2)

func useFTali(hand)
  ?hand = "l"
    equipL fire_talisman
    activate L
  :?hand = "r"
    equipR fire_talisman
    activate R

  fTaliDelay = tt + fTaliCd + castTime

  return

/* Checks if you can use the cinderwisp's "devour"
ability. */
func canUseCind()
  return summon.GetId() = "cinderwisp"
  ^& tt >= cindDelay & canAct

/* Checks if the estimated damage of
cinderwisp's "devour" ability will kill the foe,
leaving a damage margin.
  - foeTotalHP: foe hp + armor
  - nIgnitions: amount of ignition debuffs currently
                applied to the foe.
  - cindDmg: damage dealt by cinderwisp for each ignition.
  - margin: number representing a health margin to add
            to the remaining foe's health. This is
            necessary because the ability has a cast time
            that will alter the estimations done here.
            Send 0 if you don't want to use a margin. */
func canKillCind(foeTotalHP,nIgnitions,cindDmg,margin)
  return foeTotalHP <= (nIgnitions * cindDmg) + margin

func useCind()
  activate cinderwisp
  cindDelay = tt + cindCd + castTime
  return


func canUseAETali()
  return
  ^summon.GetId() ! "voidweaver" &
  ^tt >= aeTaliDelay &
  ^canAct |
  ^(il = "aether_talisman" & ils = 2) |
  ^(ir = "aether_talisman" & irs = 2)

func useAETali(hand)
  ?hand = "l"
    equipL aether_talisman
    activate L
  :?hand = "r"
    equipR aether_talisman
    activate R

  aeTaliDelay = tt + aeTaliCd + castTime

  return

/* Checks if you can use the voidweaver's "devour"
ability. */
func canUseWeav()
  return summon.GetId() = "voidweaver"
  ^& tt >= weavDelay & canAct

func useWeav()
  activate voidweaver
  weavDelay = tt + weavCd + castTime
  return

func canUseWeavDS(nScreen)
  return canUseWeav()
  ^& si = nScreen

func useWeavDS()
  ?slideCount = 0
    screen.Next()
    slideCount = 20

  :?slideCount > 0
    slideCount--
  
    ?slideCount = 0
      useWeav()
      screen.ResetOffset()

      return


/* Checks if you can use the
bashing shield's ability. */
func canBash()
  return tt >= bashDelay & !aiI
  ^& 11 <= fd & fd <= 15
  ^& canAct

func bash(lItem)
  equipL @lItem@
  equipR bashing shield

  bashDelay = tt + bashCd

  return


// Special Weapons

func canUseHamm()
  return tt >= hammDelay &
  ^canAct |
  ^(ir = "heavy hammer" &
  ^irs = 2)

var hammCdSlower
func canUseHamm2()
  hammCdSlower = item.GetCooldown("hammer") <= 0
  return hammCdSlower &
  ^canAct |
  ^(ir = "heavy hammer" &
  ^irs = 2)

func useHamm()
  equip heavy hammer
  activate R

  hammDelay = tt + hammCd + castTime

  return


func canUseBard()
  return tt >= bardDelay &
  ^canAct |
  ^(ir = "bardiche" &
  ^irs = 2)

var bardCdSlower
func canUseBard2()
  bardCdSlower = item.GetCooldown("bardiche") <= 0

  return bardCdSlower &
  ^canAct |
  ^(ir = "bardiche" &
  ^irs = 2)

func useBard(yourBard)
  ?fd < 10
    equip @yourBard@
    activate R

    bardDelay = tt + bardCd + castTime


  return


/* Checks if you can use the
dashing shield's ability. */
func canDash()
  return tt >= dashDelay & !aiI
  ^& 11 <= fd & fd <= 15
  ^& canAct

func dash(lItem,yourDshield)
  equipL @lItem@
  equipR @yourDshield@

  dashDelay = tt + dashCd

  return


func canUseQstaff()

  ?tt >= qstaffDelay
    return canAct |
    ^(ir = "quarterstaff"
    ^& irs = 2)

  :
    return false

// recieves a string
func useQstaff(yourQstaff)
  equip @yourQstaff@
  activate R

  qstaffDelay = tt + qstaffCd

  return


func canUseMind()
  return item.GetCooldown("mind") <= 0 & canAct


// Tools

func canUseHatchet()
  return item.GetCooldown("hatchet") <= 0
  ^& canAct
  ^& harvest.distance < 5
  ^& ir = "hatchet"

func useHatchet()
  activate R
  return


// Potions

func canUsePot()
  return ip ! "empty" & canAct

/* Checks if a healing type potion
can be used.
Healing type potions are considered:
  - healing
  - defensive
  - vampiric */
func canUsePotHeal()
  ?canUsePot()
    ?ip = "healing" |
    ^ip = "vampiric"
      return hp < lowhp

    :?ip = "defensive"
      return hp < midhp
    
    :
      return false
  :
    return false

/* Determines if a damage buff potion
is brewed. Generally used for bosses.
Potions related:
  - berserk
  - lucky */
func canUsePotDmg()
  return canUsePot() &
  ^(ip = "berserk" | ip = "lucky")

/* Determines if a special potion
can be activated, given a special
condition that's different for each potion type.
Valid potion types and conditions:
  - cleansing | min. no. of debuffs to cleanse
  - strength | min. amount of foe's armor
  - lightning, | ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
  - experience | min. no. of foes to activate
  - invisibility | NONE (will activate if foe = boss)
    + (send true as condition for this type) */
func canUsePotSpecial(type,cond)

  ?canUsePot()

    ?ip = type
      ?ip = "cleansing"
        return hp < midhp &
        ^debuffs.count >= cond
        // ^^^ = no. of debuffs to cleanse
    
      :?ip = "strength"
        return foe.armor & foe.armor > cond

      :?ip = "lightning"
      ^|ip = "experience"
        return foe.count >= cond

      :?ip = "invisibility"
        return f = boss

      :
        >c-10,0,#red,
        ^func canUsePotSpecial() - Potion recieved\n
        ^does not belong to this function: "@type@"
        return false

    :
      >c-10,0,#red,
      ^func canUsePotSpecial() - Potion recieved\n
      ^is not valid or equipped: "@type@"
      return false


  : // potion hasn't been brewed, it's been used,
    return false //or just can't be activated atm


// Others

var moonTimer = 0
var moonFrame
func doMoondial(weapon1, weapon2, mode)

  ?mode = 0 // Normal moondialing
    moonTimer++
    moonFrame = moonTimer % 3

    ?moonFrame = 1
      equipL moon
      equipR @weapon1@
    :?moonFrame = 2
      equipL moon
      equipR @weapon2@
    :
      equipL @weapon1@
      equipR @weapon2@

  :?mode = 1
    /* Berserk Moondialing (For non-speed enchanted *max
    swords) */
    moonTimer++
    moonFrame = moonTimer % 4

    ?moonFrame = 1
      equipL @weapon2@ // on cooldown
      equipR @weapon1@
    :?moonFrame = 2
      equipL moon
      equipR @weapon1@
    :?moonFrame = 3
      equipL @weapon1@ // on cooldown
      equipR @weapon2@
    :?moonFrame = 4
      equipL moon
      equipR @weapon2@
  
  :?mode = 2
    /* Not moondialing, but useful to have here (speed
    enchant *max swords) */
    equipL @weapon2@
    equipR @weapon1@

  :?mode = 3
    /* For when you have just 1 +21 sword (weapon2 can be
    anything, it will not be used) */
    ?fd <= 5
      equipL moon
    :
      equipL @weapon2@
    equipR @weapon1@


  return



// *******************************************************
//                  END OF "Combat.txt"                   
// *******************************************************



?l = "Rocky"
  // VARIABLES

  var dontDash
  var trueDmg

  var nRuns = 0

  var keepMask = true
  ?ll
    keepMask = false
    ?tt = 1
      nRuns++



  // FUNCTIONS

  func harvFunc(btn)
    btnPressed = true
    ?btn = yesBtn
      choice = true
    : // btn = noBtn
      choice = false
    
    return

  func bossFight()

    ?f = "phase1"
      ?!keepMask & php = pmhp
        ?bs = "berserk"
          ldtF("fdmg")
        :
          doMoondial(Vantum Phoenix, fsword, 0)
      :
        equipL Vantum Phoenix

    :?f = "phase2"
      ?f = "poison"
        ?!keepMask & php = pmhp
          ?bs = "berserk"
            ldtF("idmg")
          :
            doMoondial(Bifrost, isword, 0)
        :
          equipL Bifrost
      :?f = "vigor"
        ?!keepMask & php = pmhp
          ?bs = "berserk"
            ldtF("pdmg")
          :
            doMoondial(Mamba Negra, psword, 0)
        :
          equipL Mamba Negra
      :?f = "aether"
        ldtF("vDmg")
      :?f = "fire"
        ldtF("aeDmg")
      :?f = "ice"
        ?!keepMask & php = pmhp
          ?bs = "berserk"
            ldtF("fdmg")
          :
            doMoondial(Vantum Phoenix, fsword, 0)
        :
          equipL Vantum Phoenix

    : // ?foe = phase3
      ?canUsePotDmg()
        activate potion
      :?canUseMask()
        useMask()

      ?canUseCind()
        var cindMargin
        ?ls >= 13
          cindMargin = 1000
        :
          cindMargin = 3000
        ?fds = "ignition:15" |
        ^canKillCind(getFoeTotalHP(),
        ^              getDebuffLvl("ignition",true),
        ^              cindDmg, cindMargin)
          useCind()

      ft = foe.time

      ?((fs = 115 & ft < 70) |
      ^(fs = 32 & fdmg = 1))
      ^& ft >= 42 // putting up shield
        dontDash = true

        ?canUseMind()
          ldtF("escape")
        :?fd > 7
          equip @aebow@
        :?canUseMask()
          useMask()
      :
        dontDash = false
        ?fa > 0 & canUseHamm2() &
        ^!bardCdSlower & fd < 11
          useHamm()
        :
          ?fbs ! "defense_fire"
            ?!keepMask & php = pmhp
              ?bs = "berserk"
                ldtF("fdmg")
              :
                doMoondial(Vantum Phoenix, fsword, 0)
            :
              equipL Vantum Phoenix
          :
            ?!keepMask & php = pmhp
              ?bs = "berserk"
                ldtF("idmg")
              :
                doMoondial(Bifrost, isword, 0)
            :
              equipL Bifrost


    ?php < pmhp
    ^& !canBash() & !canDash()
    ^& !keepMask
      equipR @dLsword@


    return



  // LOADOUTS

  func ldtF(mode)
    ?mode = "default"
      equipL triskelion
      ?!keepMask
        equipR @cshield1@
    :?mode = "armorRecover"
      equipL triskelion
      ?!keepMask
        equipR @cshield2@
    :?mode = "escape"
      equipL mind
      equipR @cshield2@

      //mindDelay = tt + mindCd
    :?mode = "magnet"
      equipL star
      ?!keepMask
        equipR triskelion


    :?mode = "harv"
      equip shovel


    //buffs/debuffs (oriented to duration)
    :?mode = "pDeb1"
      equipL @dPsword1@
      equipR mask
    :?mode = "pDeb2"
      equipL @dPsword1@ // put 2 when upgraded back to normal
      equipR mask
    :?mode = "aidActive"
      equipL @ahHammer@
      equipR @ahShield@
      
    :?mode = "fDeb"
      equipL @dFsword@
      equipR mask
    :?mode = "iDeb"
      equipL @dIsword@
      equipR mask
    //damage
    :?mode = "fDmg"
      equipL Vantum Phoenix
      ?!keepMask
        equipR @fsword@
    :?mode = "iDmg"
      equipL Bifrost
      ?!keepMask
        equipR @isword@
    :?mode = "pDmg"
      equipL Mamba Negra
      ?!keepMask
        equipR @psword@
    :?mode = "vDmg"
      equipL Dothaneel
      ?!keepMask
        equipR @vsword@
    :?mode = "aeDmg"
      equipL Void Slayer
      ?!keepMask
        equipR @aesword@


    : // print error message on screen
      showStrCentered(
      ^"ERROR: ldtF() recieved incorrect mode: " + mode,
      ^0, 30, "yellow")


    return 


  // PROCEDURE


  var somui = speedOmeterUI(0, 1, colToHex("pink"), true, false)
  ?speedOmeterUpdate(false)
    somui.Recycle()
    somui = null

    somui = speedOmeterUI(0, 1, colToHex("pink"), true, false)


  DPSMeterEnabled = true
  var dpsPanel
  ?dpsMeterUpdate(2)
    ?dpsPanel
      dpsPanel.Recycle()
      dpsPanel = null

    dpsPanel = uiDPSMeter(0, 4, "#yellow", 2)


  var choice = false
  var btnPressed = false

  var yesBtn
  var noBtn

  var dontShowAgain = false



  ?!btnPressed
    ?!yesBtn
      yesBtn = mkBtn(
      ^-5,9,null,2,null,null, // x, y, w, h, anchor, dock,
      ^"Yes","#green", // txt, col,
      ^null,null,null, // tcol, bcol, hcol,
      ^-5,harvFunc, // style, pressed,
      ^null,null,null) // down, up, sound

    ?!noBtn
      noBtn = mkBtn(
      ^5,9,8,2,null,null, // x, y, w, h, anchor, dock,
      ^"No","red", // txt, col,
      ^null,null,null, // tcol, bcol, hcol,
      ^-5,harvFunc, // style, pressed,
      ^null,null,null) // down, up, sound


    showStrCtr(6,30,
    ^"Harvest boulders?","#yellow",
    ^false)

  :
    ?yesBtn
      yesBtn.Recycle()
      yesBtn = null
    ?noBtn
      noBtn.Recycle()
      noBtn = null


    ?!dontShowAgain
      var aux = tt + 3*sec
      ?tt < aux
        ?choice
          showStrCtr(6, 30,
          ^"Harvest boulders is enabled","#green",
          ^false)
        :
          showStrCtr(6, 30,
          ^"Harvest boulders is disabled","#red",
          ^false)
      :
        ?!dontShowAgain
          dontShowAgain = true



  /* Mano izquierda:
  --- hacer AAC ---
  - cuando state = 3
  --- NO hacer AAC ---
  - Cuando tenemos la mascara puesta y el arma equipada es una espada D +21. */
  ?ils = 3 & !(keepMask & il = "sword D +21")
    equipL wand 0*
    equipL @il@
  ?irs = 3 & ir ! "sword D +21"
    equipR @cshield2@
    equipR @ir@


  ?debuffs.string | (tt > lavg & nRuns >= 2)
    loc.Leave()


  ?lb
    rs = res.stone
    rb = res.bronze

    ?rs >= 10 & rb >= 10
      ?ip ! "lucky"
        brew stone + bronze
    :
      loc.Leave()

    /*rw = res.wood
    rb = res.bronze
    ?rw >= 10 & rb >= 10
      ?ip ! "berserk"
        brew wood + bronze
    :
      loc.Leave()*/


  ?keepMask
    equipR mask


  ?lb | ll
    /* ldtF("default") but w/o considering keepMask*/
    equipL triskelion
    equipR @cshield1@


  :?canUseFTali()
    equipL triskelion
    useFTali("r")
    
  :?canUsePotDmg() & keepMask
    activate potion


  :?choice & harvest.distance < 5
    ldtF("harv")

  :?pickup.distance < 15
    ldtF("magnet")


  :
    fd = foe.distance
    fs = foe.state
    fdmg = foe.damage
    php = hp
    pmhp = maxhp


    aiE = ai.enabled


    ?f = "dysangelos" & fd <= 22
    ^& canUseBard2() &
    ^(fs = 100 | fs = 101 |
    ^fs = 102 | fs = 126)
      ?canUseHamm2()
        useHamm()
      :?canUseQstaff()
        useQstaff(myqstaff)
      :?canDash()
        dash(Vantum Phoenix, dshield)
      :
        bs = buffs.string
        ?bs = "berserk"
          useBard(Kubikiribocho)
        :
          useBard(fastBard)


    :?fd > 15 | !aiE |
    ^(fs = 124 | fs = -1 |
    ^(fs = 107 & fdmg = 3)) // Dysan's flying animation (after putting shield on phase3)
      fa = armor
      ?14 <= fa & fa <= 29
        ldtF("default")
      :
        ldtF("armorRecover")
        
    :?aiE & fs ! -1
      // fighting range

      f = foe
      fbs = foe.buffs.string
      fds = foe.debuffs.string
      fa = foe.armor

      bs = buffs.string

      ?f = "acronian_scout"
        ?canBash()
          bash(Vantum Phoenix)

        :
          ?keepMask
            ?fds ! "chill:6"
              equipL @dIsword@
            :?fds ! "damage"
              equipL @dPsword1@
            :?fds ! "dot"
              equipL @dFsword@
            :
              equipL Vantum Phoenix

          :
            ?php = pmhp
              doMoondial(Vantum Phoenix, fsword, 0)
            :
              equipL Vantum Phoenix
              equipR @dLsword@


      :?f = "dysangelos" &
      ^fs ! 124
      ^!(fs = 107 & fdmg = 3)

        fdmg = foe.damage
        ft = foe.time
        
        trueDmg = fdmg
        ?fds = "damage"
          ?f = "phase3"
            trueDmg -= 8
          :
            trueDmg -= 4

        ?fds = "feeble"
          trueDmg -= 2*getDebuffLvl("feeble", true)
        
        
        ?canBash() & !dontDash
          bash(Vantum Phoenix)
        :?canDash() & !dontDash
          dash(Vantum Phoenix, dshield)


        :?armor < trueDmg & fs = 32 & (
        ^(f = "phase1" &
        ^  ((fds = "chill" & ft > 58) // about to attack, slowed down by chill debuff
        ^ | (48 < ft & ft < 52)      )) | // same, but w/o chill (sometimes it runs out right when attacking)
        ^(f = "phase3" & ft > 80)  ) // final phase, about to normal attack
          ldtF("aidActive")


        :?f ! "immune_to_debuff_damage"
        ^& fbs ! "buff_protection"
        ^& ls > 5
          ?keepMask
            ?fds ! "chill:6"
              ldtF("iDeb")

            :?fds ! "damage"
              ?f = "phase3"
                ldtF("pDeb2")
              :
                ldtF("pDeb1")
            :
              ?fds ! "dot"
                ldtF("fDeb")
              :
                bossFight()
          :
            ?fds ! "damage"
              ?f = "phase3"
                ldtF("pDeb2")
              :
                ldtF("pDeb1")
            :
              bossFight()
        :
          bossFight()



// *******************************************************
//                  END OF "1-Rocky.txt"                  
// *******************************************************
