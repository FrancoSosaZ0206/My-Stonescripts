// *******************************************************
//                    Speed_O_Meter.txt                   
// *******************************************************



/* FILE INFO
  Time Display Utility
  Made by MetalEagle26 (Tom Crow)

  current version: 1.6


DESCRIPTION
  This library provides functions to display your times on
    your runs!
  Includes some speedrunning versions to submit your times
    in frames ;)


HOW TO IMPORT
  PC:
    Put this file in C:/.../Stonescript/UI or your
    folder of preference
    and in your mindstone/ main script, do this:

    var speedOmeter
    speedOmeter = import UI/Speed_O_Meter

  Mobile:
    Copy-Paste this into your mindstone/script.


HOW TO USE
  Example for PC:
    ?speedOmeter.speedOmeterUpdate()
      speedOmeter.showSpeedOmeter(x,y,col)

  Example for Mobile (Recommended):
    var SOMPanel
    ?speedOmeterUpdate()
      SOMPanel = showSpeedOmeterUI(x,y,col)

······················································

CHANGELOG:
  v1.2:
    - Now you can choose a slim version
      of the meter in all functions.
  v1.3:
    - showSpeedOmeterUI() renamed to "speedOmeterUI".
    - added import: UI_Maker.txt
    - speedOmeterUI now uses functions from
      the import "UI_Maker.txt".
  v1.4:
    - Fixed bug that prevented displaying
      the meter before the first
      second of each run.
  v1.5:
    - Now all functions that show the meter
      depend on speedOmeterToStr().
  v1.6:
    - formatSpeedrun(): now 1 digit frames
      are prefixed with a zero ('0').
    - myFormatDigital() and formatSpeedrun()
      moved to Utilities.
    - fixed ttSpeedrun update frequency. Now
      it updates every frame as it should.


······················································

Tip: keep in mind that speedrunning functions need to
  update constantly to show the frames, which may cause
  some lag.
  Also, remember to use ".Recycle()" function and assign
  to "null" after using UI functions!


Enjoy! */



// IMPORTS:

var u = import MyScripts/Imports/PC/Utilities
var uimkr = import MyScripts/Imports/PC/UI_Maker



// VARIABLES:

var sec = 30 // frames

// Times in frames:
var tt = totaltime
var lbt
var lavg

tt = totaltime
?tt <= 1
  lbt = loc.bestTime
  lavg = loc.averageTime

// Times in seconds:
var ttDigital = u.myFormatDigital(tt)
var pb = u.myFormatDigital(lbt)
var avg = u.myFormatDigital(lavg)

// Times in seconds and frames:
var ttSpeedrun = u.formatSpeedrun(tt)
var pbSpeedrun = u.formatSpeedrun(lbt)
var avgSpeedrun = u.formatSpeedrun(lavg)


// Variable updating frequency:
?tt % 30 = 0
  ttDigital = u.myFormatDigital(tt)
ttSpeedrun = u.formatSpeedrun(tt)

?loc.loop
  pb = u.myFormatDigital(lbt)
  avg = u.myFormatDigital(lavg)

  pbSpeedrun = u.u.formatSpeedrun(lbt)
  avgSpeedrun = u.u.formatSpeedrun(lavg)



// PUBLIC FUNCTIONS

func speedOmeterUpdate(isSpeedrun)
  ?isSpeedrun
    return true
  :
    return loc.begin | loc.loop | (tt % 30 = 0)

func speedOmeterToStr(isSlim, isSpeedrun)

  ?isSlim
    ?isSpeedrun
      return
      ^"☆ " + pbSpeedrun +  // ☆ = PB
      ^" | ≈ " + avgSpeedrun + // ≈ = AVG
      ^" | ▶ " + ttSpeedrun           // ▶ = CURR

    :
      return
      ^"☆ " + pb +       // ☆ = PB
      ^" | ≈ " + avg +      // ≈ = AVG
      ^" | ▶ " + ttDigital         // ▶ = CURR

  :
    ?isSpeedrun
      return
      ^"    SPEED-O-METER" + "\n" +
      ^"·····················" + "\n" +
      ^" PB  " + pbSpeedrun + " (" + lbt + "f)" + "\n" +
      ^" AVG " + avgSpeedrun + " (" + lavg + "f)" + "\n" +
      ^" CUR " + ttSpeedrun + " (" + tt + "f)"

    :
      return
      ^"SPEED-O-METER" + "\n" +
      ^"·············" + "\n" +
      ^"  PB  " + pb + "\n" +
      ^"  AVG " + avg + "\n" +
      ^"  CUR " + ttDigital

func printSpeedOmeter(x, y, col, isSlim, isSpeedrun)

  >`@x@,@y@,@col@,@speedOmeterToStr(isSlim, isSpeedrun)@

  return

func asciiPrintSpeedOmeter(x, y, col, isSlim, isSpeedrun)

  >`@x@,@y@,@col@,ascii
@u.replaceInStr(speedOmeterToStr(isSlim, isSpeedrun), " ", "#")@
asciiend

  return

func speedOmeterUI(x, y, col, isSlim, isSpeedrun)

  var txt
  var panel

  // For the panel:
  var pnlAnchor
  var pnlDock
  var style
  
  ?isSlim
    pnlAnchor = top_center
    pnlDock = top_center
    style = -1
  :
    pnlAnchor = top_left
    pnlDock = top_left
    style = -2

  txt = uimkr.mkTxtbox(
    ^1, 1, null, null, // x, y, w, h,
    ^top_left, top_left, // pnlAnchor, dock,
    ^speedOmeterToStr(isSlim, isSpeedrun), // txt
    ^null, col) // align, col

  panel = uimkr.mkPanel(
    ^x, y, txt.w + 2, txt.h + 2, // x, y, w, h,
    ^pnlAnchor, pnlDock, // anchor, dock,
    ^col, style, txt) // col, style, child

  return panel



// *******************************************************
//               END OF "Speed_O_Meter.txt"               
// *******************************************************
