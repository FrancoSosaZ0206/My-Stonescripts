// *******************************************************
//                       Combat.txt                       
// *******************************************************


// VARIABLES




// Status


var midhp = maxhp / 2
var lowhp = maxhp / 3
var hihp = (4 * maxhp) / 5




// FUNCTIONS






// Stats




/* - arrInfo[0] is symbol
   - arrInfo[1] is id
   - arrInfo[2] is stack count
   - arrInfo[3] is remaining duration on first stack */
func getBuffInfo(nameid,inFoe,infoIndex)
  // if inFoe = true, checks foe's buffs, else, player's buffs
  var info
  var buffFound
  var arrBuffs


  ?inFoe
    arrBuffs = string.Split(fbs,",", true)
  :
    arrBuffs = string.Split(bs,",", true)
    
  ?arrBuffs & !buffFound
    for buff : arrBuffs
      ?buff = nameid
        var arrInfo = string.Split(buff,":",true)


        ?0 <= infoIndex & infoIndex <= 3
          info = int.Parse(arrInfo[infoIndex])


        buffFound = true


    ?buffFound = true
      return info
    :
      return 0


/* - arrInfo[0] is symbol
   - arrInfo[1] is id
   - arrInfo[2] is stack count
   - arrInfo[3] is remaining duration on first stack */
func getDebuffLvl(nameid,inFoe)
  // if inFoe = true, checks foe's debuffs, else, player's debuffs
  var lvl
  var debuffFound
  var arrDebuffs


  ?inFoe
    arrDebuffs = string.Split(fds,",", true)
  :
    arrDebuffs = string.Split(ds,",", true)


  ?arrDebuffs & !debuffFound
    for debuff : arrDebuffs
      ?debuff = nameid
        var arrInfo = string.Split(debuff,":",true)


        lvl = int.Parse(arrInfo[2])
        debuffFound = true


    ?debuffFound = true
      return lvl
    :
      return 0




func getFoeTotalHP()
  return fhp + fa






// Lost items




func canUseBlade()
  return tt >= bladeDelay & canAct


// cannot be interrupted, doesn't need a cooldown check
func useBlade()
  equip blade
  activate R


  bladeDelay = tt + bladeCd


  return


/* Checks if Blade of the Fallen God
can be used in 2 screens of distance,
according to a certain screen index. */
func canUseBladeDS(nScreen)
  return canUseBlade()
  ^& si = nScreen


var slideCount = 0 // counter to give screen.Next() time to slide
func useBladeDS()
  ?slideCount = 0
    screen.Next()
    slideCount = 20
  
  :?slideCount > 0
    slideCount--
  
    ?slideCount = 0
      useBlade()
      screen.ResetOffset()
      return




func canUseArm()
  return tt >= armDelay &
  ^3 < fd & fd < 7
  ^& canAct


func useArm()
  equip arm
  activate R


  armDelay = tt + armCd


  return




func canUseMask()
  return tt >= maskDelay & canAct


func useMask()
  equipL triskelion
  equipR mask
  activate R


  maskDelay = tt + maskCd


  return


func canUseMaskDS(nScreen)
  return canUseMask()
  ^& si = nScreen


func useMaskDS()
  ?slideCount = 0
    screen.Next()
    slideCount = 20
  
  :?slideCount > 0
    slideCount--
  
    ?slideCount = 0
      useMask()
      screen.ResetOffset()
      return






func canUseTali()
  return summon.count = 0 &
  ^tt >= taliDelay &
  ^canAct |
  ^(il = talisman & ils = 2) |
  ^(ir = talisman & irs = 2)


func canHideTali()
  return summon.count > 0 & summon.GetId() = "cinderwisp"
  ^& tt >= taliDelay
  ^& canAct |
  ^(il = talisman & ils = 2) |
  ^(ir = talisman & irs = 2)


func useTali(hand)
  ?hand = "l"
    equipL talisman
    activate L
  :?hand = "r"
    equipR talisman
    activate R


  taliDelay = tt + taliCd + castTime


  return


/* Checks if you can use the cinderwisp's "devour"
ability. */
func canUseCind()
  return summon.count >= 1
  ^& summon.GetId() = "cinderwisp"
  ^& tt >= cindDelay & canAct


/* Checks if the estimated damage of
cinderwisp's "devour" ability will kill the foe,
leaving a damage margin.
  - cindDmg: represents the damage the cinderwisp does,
             which will be multiplied by each ignition
             debuff applied.
  - margin: number representing a health margin to add
            to the remaining foe's health. This is
            necessary because the ability has a cast time
            that will alter the estimations done here.
            Send 0 if you don't want to use a margin. */
func canKillCind(cindDmg,margin)
  return getFoeTotalHP() <= (getDebuffLvl(ignition,true) * cindDmg) + margin


func useCind()
  activate cinderwisp
  cindDelay = tt + cindCd + castTime
  return




/* Checks if you can use the
bashing shield's ability. */
func canBash()
  return tt >= bashDelay & !aiI
  ^& 11 <= fd & fd <= 15
  ^& canAct


func bash(lItem)
  equipL @lItem@
  equipR bashing shield


  bashDelay = tt + bashCd


  return








// Special Weapons




func canUseHamm()
  return tt >= hammDelay &
  ^canAct |
  ^(ir = heavy hammer &
  ^irs = 2)


var hammCdSlower
func canUseHamm2()
  hammCdSlower = item.GetCooldown("hammer") <= 0
  return hammCdSlower &
  ^canAct |
  ^(ir = "heavy hammer" &
  ^irs = 2)


func useHamm()
  equip heavy hammer
  activate R


  hammDelay = tt + hammCd + castTime


  return




func canUseBard()
  return tt >= bardDelay &
  ^canAct |
  ^(ir = bardiche &
  ^irs = 2)


var bardCdSlower
func canUseBard2()
  bardCdSlower = item.GetCooldown("bardiche") <= 0
  return bardCdSlower &
  ^canAct |
  ^(ir = "bardiche" &
  ^irs = 2)


func useBard(yourBard)
  ?fd < 10
    equip @yourBard@
    activate R


    bardDelay = tt + bardCd + castTime


  return




/* Checks if you can use the
dashing shield's ability. */
func canDash()
  return tt >= dashDelay & !aiI
  ^& 11 <= fd & fd <= 15
  ^& canAct


func dash(lItem,yourDshield)
  equipL @lItem@
  equipR @yourDshield@


  dashDelay = tt + dashCd


  return




func canUseQstaff()
  ?tt >= qstaffDelay


    return canAct |
    ^(ir = quarterstaff
    ^& irs = 2)
  :
    return false


// recieves a string
func useQstaff(yourQstaff)
  equip @yourQstaff@
  activate R


  qstaffDelay = tt + qstaffCd


  return


func canUseMind()
  return item.GetCooldown("mind") <= 0 & canAct








// Tools




func canUseHatchet()
  return item.GetCooldown("hatchet") <= 0
  ^& canAct
  ^& harvest.distance < 5
  ^& ir = hatchet


func useHatchet()
  activate R
  return








// Potions




func canUsePot()
  return ip ! empty & canAct


/* Checks if a healing type potion
can be used.
Healing type potions are considered:
  - healing
  - defensive
  - vampiric */
func canUsePotHeal()
  ?canUsePot()
    ?ip = healing |
    ^ip = vampiric
      return hp < lowhp


    :?ip = defensive
      return hp < midhp
    
    :
      return false
  :
    return false


/* Determines if a damage buff potion
is brewed. Generally used for bosses.
Potions related:
  - berserk
  - lucky */
func canUsePotDmg()
  return canUsePot() &
  ^(ip = berserk | ip = lucky)


/* Determines if a special potion
can be activated, given a special
condition that's different for each potion type.
Valid potion types and conditions:
  - cleansing | min. no. of debuffs to cleanse
  - strength | min. amount of foe's armor
  - lightning, | ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
  - experience | min. no. of foes to activate
  - invisibility | NONE (will activate if foe = boss)
    + (send true as condition for this type) */
func canUsePotSpecial(type,cond)
  ?canUsePot()


    ?ip = type
      ?ip = cleansing
        return hp < midhp &
        ^debuffs.count >= cond
        // ^^^ = no. of debuffs to cleanse
    
      :?ip = strength
        return foe.armor & foe.armor > cond


      :?ip = lightning
      ^|ip = experience
        return foe.count >= cond


      :?ip = invisibility
        return f = boss


      :
        >c-10,0,#red,
        ^func canUsePotSpecial() - Potion recieved\n
        ^does not belong to this function: "@type@"
        return false


    :
      >c-10,0,#red,
      ^func canUsePotSpecial() - Potion recieved\n
      ^is not valid or equipped: "@type@"
      return false


  : // potion hasn't been brewed, it's been used,
    return false //or just can't be activated atm








// Others




var moonTimer = 0
var moonFrame
func doMoondial(weapon1, weapon2, mode)
  ?mode = 0 // Normal moondialing
    moonTimer++
    moonFrame = moonTimer % 3


    ?moonFrame = 1
      equipL moon
      equipR @weapon1@
    :?moonFrame = 2
      equipL moon
      equipR @weapon2@
    :
      equipL @weapon1@
      equipR @weapon2@


  :?mode = 1
    /* Berserk Moondialing (For non-speed enchanted *max
    swords) */
    moonTimer++
    moonFrame = moonTimer % 4


    ?moonFrame = 1
      equipL @weapon2@ // on cooldown
      equipR @weapon1@
    :?moonFrame = 2
      equipL moon
      equipR @weapon1@
    :?moonFrame = 3
      equipL @weapon1@ // on cooldown
      equipR @weapon2@
    :?moonFrame = 4
      equipL moon
      equipR @weapon2@
  
  :?mode = 2
    /* Not moondialing, but useful to have here (speed
    enchant *max swords) */
    equipL @weapon2@
    equipR @weapon1@


  :?mode = 3
    /* For when you have just 1 +21 sword (weapon2 can be
    anything, it will not be used) */
    ?fd <= 5
      equipL moon
    :
      equipL @weapon2@
    equipR @weapon1@




  return


// *******************************************************
//                  END OF "Combat.txt"                   
// *******************************************************